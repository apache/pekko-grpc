/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, which was derived from Akka.
 */

plugins {
  id 'groovy'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

group = "org.apache.pekko"

def getVersionFromParentSbtBuild() {
    ByteArrayOutputStream os = new ByteArrayOutputStream()
    try {
        String parentDir = project.rootDir.getParentFile().getPath()
        exec {
            workingDir parentDir
            commandLine 'sbt', '--no-colors', '--error', 'set aggregate := false; print version'
            standardOutput os
        }
    } finally {
        os.close()
    }
    String finalVersion = os.toString().trim()
    project.logger.info("Derived gradle version from parent sbt build: $finalVersion")
    return finalVersion
}
version = getVersionFromParentSbtBuild()

gradlePlugin {
  plugins {
    pekkoGrpcPlugin {
      id = 'org.apache.pekko.grpc.gradle'
      implementationClass = 'org.apache.pekko.grpc.gradle.PekkoGrpcPlugin'
    }
  }
}

publishing {
    publications.withType(MavenPublication) {
        pom {
            name = "Apache Pekko gRPC Gradle Plugin"
            description = "Apache Pekko gRPC - Support for building streaming gRPC servers and clients on top of Pekko Streams."
            url = "https://pekko.apache.org/"
            licenses {
                license {
                    name = "Apache-2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0.html"
                }
            }
            developers {
                developer {
                    id = 'contributors'
                    name = 'Contributors'
                    url = 'https://github.com/apache/pekko-grpc/graphs/contributors'
                    email = 'dev@pekko.apache.org'
                }
            }
            scm {
                connection = 'git@github.com:apache/pekko-grpc'
                url = 'https://github.com/apache/pekko-grpc'
            }
        }
    }
}

def getEnvVariable(String envVariableName) {
    String envVariableValue = System.getenv(envVariableName)
    if (envVariableValue == null)
        project.logger.error("${envVariableName} is null")
    else if (envVariableValue.isEmpty())
        project.logger.error("${envVariableName} is is empty")
    else if (envVariableValue.isBlank())
        project.logger.error("${envVariableName} is is blank")
    return envVariableValue
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://repository.apache.org/service/local/")
            snapshotRepositoryUrl = uri("https://repository.apache.org/content/repositories/snapshots/")
            username = getEnvVariable("NEXUS_USER")
            password = getEnvVariable("NEXUS_PW")
        }
    }
}

Boolean isReleaseVersion = !version.toString().endsWith("SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

jar {
  manifest {
    attributes 'Implementation-Version': project.version
  }
}

jar.dependsOn('copyLicenseToBuildResources')

tasks.register('copyLicenseToBuildResources', Copy) {
    from layout.projectDirectory.file("../LICENSE")
    from layout.projectDirectory.file("../NOTICE")
    from layout.projectDirectory.file("../DISCLAIMER")
    into layout.buildDirectory.dir("resources/main/META-INF")
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
  implementation 'commons-lang:commons-lang:2.6'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
}

test {
  systemProperty 'pekkoGrpcTest.pluginVersion', project.version
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams = false
  }
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.WARN
}
