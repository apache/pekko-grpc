@*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * license agreements; and to You under the Apache License, version 2.0:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * This file is part of the Apache Pekko project, which was derived from Akka.
 *@

@*
 * Copyright (C) 2018-2021 Lightbend Inc. <https://www.lightbend.com>
 *@

@(service: org.apache.pekko.grpc.gen.javadsl.Service)

@org.apache.pekko.grpc.gen.Constants.DoNotEditComment
package @service.packageName;

import io.grpc.MethodDescriptor;

import org.apache.pekko.grpc.internal.*;
import org.apache.pekko.grpc.ProtobufSerializer;
import org.apache.pekko.grpc.javadsl.GoogleProtobufSerializer;

import org.apache.pekko.grpc.PekkoGrpcGenerated;

import static @{service.packageName}.@{service.name}.Serializers.*;

@for(comment <- service.comment) {/**
@{java.util.regex.Pattern.compile("^\\s?(.*)$", java.util.regex.Pattern.MULTILINE).matcher(comment).replaceAll(" * $1")} */}
public interface @{service.name} extends org.apache.pekko.grpc.PekkoApi {
  @for(method <- service.methods) {
  @for(comment <- method.comment) {/**
@{java.util.regex.Pattern.compile("^\\s?(.*)$", java.util.regex.Pattern.MULTILINE).matcher(comment).replaceAll("   * $1")}   */}
  @{method.getReturnType} @{method.name}(@{method.getParameterType} in);
  }

  static final String name = "@service.grpcName";
  static final org.apache.pekko.grpc.ServiceDescription description = new org.apache.pekko.grpc.internal.ServiceDescriptionImpl(name, @service.descriptor, java.util.Collections.unmodifiableList(java.util.Arrays.asList(
                                                                                                                                                       @for(method <- service.methods) {
                                                                                                                                                         @if(method != service.methods.last) {
                                                                                                                                                         MethodDescriptors.@{method.name}Descriptor,
                                                                                                                                                         } else {
                                                                                                                                                         MethodDescriptors.@{method.name}Descriptor
                                                                                                                                                         }
                                                                                                                                                       }
                                                                                                                                                       )));

  @@PekkoGrpcGenerated
  public static class Serializers {
    @for(serializer <- service.serializers) {
      public static ProtobufSerializer<@{serializer.messageType}> @serializer.name = @serializer.init;
    }
  }

  @@PekkoGrpcGenerated
  public static class MethodDescriptors {
    @for(method <- service.methods) {
    public static MethodDescriptor<@method.inputTypeUnboxed, @method.outputTypeUnboxed> @{method.name}Descriptor =
      MethodDescriptor.<@method.inputTypeUnboxed, @method.outputTypeUnboxed>newBuilder()
        .setType(@mapMethodType(method.methodType))
        .setFullMethodName(MethodDescriptor.generateFullMethodName("@service.grpcName", "@method.grpcName"))
        .setRequestMarshaller(new ProtoMarshaller<@method.inputTypeUnboxed>(@method.deserializer.name))
        .setResponseMarshaller(new ProtoMarshaller<@method.outputTypeUnboxed>(@method.serializer.name))
        .setSampledToLocalTracing(true)
        .build();
    }
  }
}

@mapMethodType(methodType: org.apache.pekko.grpc.gen.MethodType) = {
  @if(methodType == org.apache.pekko.grpc.gen.Unary) { MethodDescriptor.MethodType.UNARY }
  @if(methodType == org.apache.pekko.grpc.gen.ClientStreaming) {MethodDescriptor.MethodType.CLIENT_STREAMING }
  @if(methodType == org.apache.pekko.grpc.gen.ServerStreaming) { MethodDescriptor.MethodType.SERVER_STREAMING }
  @if(methodType == org.apache.pekko.grpc.gen.BidiStreaming) {MethodDescriptor.MethodType.BIDI_STREAMING }
}
